
import java.nio.file.Paths

def buildDir = '_build'

[
  [name: 'x86_64-unknown-linux-gnu', image: 'ockam/builder_c']
].each { toolchain ->

  ['Release', 'Debug'].each { buildType ->

    def targetDirPath = Paths.get(buildDir, toolchain.name, buildType.toLowerCase())
    def dockerFilePath = Paths.get(targetDirPath.toString(), 'Dockerfile')

    def taskNameSuffix = "_${buildType.toLowerCase()}_${toolchain.name}"


    task "setup_target_dir${taskNameSuffix}" {
      doLast { mkdir targetDirPath }
    }

    task "create_docker_file${taskNameSuffix}" {
      dependsOn "setup_target_dir${taskNameSuffix}"
      onlyIf { !file(dockerFilePath).exists() }
      doLast {
        dockerFilePath.toFile().write """\
          FROM ${toolchain.image}
          WORKDIR /work
        """.stripIndent()
      }
    }

    task "build_image${taskNameSuffix}" {
      dependsOn "create_docker_file${taskNameSuffix}"
      doLast {
        exec {
          workingDir targetDirPath
          commandLine 'docker', 'build', '-t', 'ockam/implementations/c', '.'
        }
      }
    }

    task "build${taskNameSuffix}" {
      group toolchain.name
      // dependsOn "create_docker_file${taskNameSuffix}"
      doLast {
        exec {
          commandLine 'ls', '_build/x86_64-unknown-linux-gnu/release'
        }
      }

      // dependsOn "build_image${taskNameSuffix}"
      // doLast {
      //   exec {
      //     commandLine 'docker', 'run', '--rm', '--volume', "${projectDir}:/work", 'ockam/implementations/c', 'bash', '-c', """
      //       set -e;
      //       cd ${buildDir}/${toolchain.name}/${buildType.toLowerCase()};
      //       cmake -DCMAKE_BUILD_TYPE=${buildType} -DOCKAM_BUILD_TESTS=ON -DOCKAM_TARGET_PLATFORM="linux" ../../..;
      //       cmake --build .;
      //     """
      //   }
      // }
    }

    task "test${taskNameSuffix}" {
      group toolchain.name
    }

    task "remove_image${taskNameSuffix}" {
      doLast {
        exec {
          commandLine 'docker', 'rmi', 'ockam/implementations/c'
          ignoreExitValue true
          errorOutput = new ByteArrayOutputStream()
        }
      }
    }

    task "clean${taskNameSuffix}" {
      group toolchain.name
      dependsOn "remove_image${taskNameSuffix}"
      doLast {
        delete targetDirPath
      }
    }

  }
}

task build {
  dependsOn 'build_release_x86_64-unknown-linux-gnu'
}

task test {
  dependsOn 'test_release_x86_64-unknown-linux-gnu'
}

task clean {
  dependsOn 'clean_debug_x86_64-unknown-linux-gnu', 'clean_release_x86_64-unknown-linux-gnu'
  doLast {
    delete buildDir
  }
}
